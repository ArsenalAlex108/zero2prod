    Blocking waiting for file lock on build directory
    Checking zero2prod v0.1.0 (D:\Projects\Rust\zero2prod)
warning: unused import: `naan::semigroup::Semigroup`
 --> src\configuration.rs:5:5
  |
5 | use naan::semigroup::Semigroup;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
warning: unused import: `serde_aux::field_attributes::deserialize_number_from_string`
 --> src\configuration.rs:8:5
  |
8 | use serde_aux::field_attributes::deserialize_number_from_string;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `ValidationHKT`
  --> src\configuration.rs:19:47
   |
19 |     K1, RefHKT, SharedPointerHKT, Validation, ValidationHKT,
   |                                               ^^^^^^^^^^^^^
warning: unused import: `std::cell::Cell`
 --> src\hkt\validation.rs:1:5
  |
1 | use std::cell::Cell;
  |     ^^^^^^^^^^^^^^^
warning: unused import: `actix_web::App`
 --> src\hkt\validation.rs:4:5
  |
4 | use actix_web::App;
  |     ^^^^^^^^^^^^^^
warning: unused import: `Monoid`
 --> src\hkt\validation.rs:9:21
  |
9 | use naan::prelude::{Monoid, Semigroup};
  |                     ^^^^^^
warning: unused import: `sync::Arc`
 --> src\startup.rs:1:29
  |
1 | use std::{net::TcpListener, sync::Arc};
  |                             ^^^^^^^^^
warning: unused imports: `ArcHKT`, `confirm_subscription_token`, and `self`
  --> src\startup.rs:14:20
   |
14 |     email_client::{self, EmailClient},
   |                    ^^^^
15 |     hkt::{ArcHKT, RcHKT, RefHKT},
   |           ^^^^^^
16 |     routes::{
17 |         confirm_subscription_token, health_check,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 3.46s

pub mod configuration {
    use config::Config;
    use const_format::formatcp;
    use naan::apply::Apply;
    use naan::fun::F2Once;
    use naan::semigroup::Semigroup;
    use nameof::name_of;
    use serde::de;
    use serde_aux::field_attributes::deserialize_number_from_string;
    use sqlx::ConnectOptions;
    use sqlx::postgres::{PgConnectOptions, PgSslMode};
    use std::convert::TryFrom;
    use std::marker::PhantomData;
    use tracing_log::log;
    use crate::domain::{SubscriberEmail, SubscriberEmailParseError};
    use crate::hkt::{K1, RefHKT, SharedPointerHKT, Validation, ValidationHKT};
    use crate::serde::DeserializeError;
    use crate::utils::Pipe;
    const APP_ENVIRONMENT: &str = {
        let _ = || {
            let _ = &APP_ENVIRONMENT;
        };
        "APP_ENVIRONMENT"
    };
    pub struct Settings<P: SharedPointerHKT> {
        pub database: DatabaseSettings<P>,
        pub application: ApplicationSettings<P>,
        pub email_client: EmailClientSettings<P>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de, P: SharedPointerHKT> _serde::Deserialize<'de> for Settings<P>
        where
            P: _serde::Deserialize<'de>,
        {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "database" => _serde::__private::Ok(__Field::__field0),
                            "application" => _serde::__private::Ok(__Field::__field1),
                            "email_client" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"database" => _serde::__private::Ok(__Field::__field0),
                            b"application" => _serde::__private::Ok(__Field::__field1),
                            b"email_client" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de, P: SharedPointerHKT>
                where
                    P: _serde::Deserialize<'de>,
                {
                    marker: _serde::__private::PhantomData<Settings<P>>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de, P: SharedPointerHKT> _serde::de::Visitor<'de>
                for __Visitor<'de, P>
                where
                    P: _serde::Deserialize<'de>,
                {
                    type Value = Settings<P>;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Settings",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            DatabaseSettings<P>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Settings with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            ApplicationSettings<P>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Settings with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            EmailClientSettings<P>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Settings with 3 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Settings {
                            database: __field0,
                            application: __field1,
                            email_client: __field2,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            DatabaseSettings<P>,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            ApplicationSettings<P>,
                        > = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<
                            EmailClientSettings<P>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "database",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            DatabaseSettings<P>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "application",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            ApplicationSettings<P>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "email_client",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            EmailClientSettings<P>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("database")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("application")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("email_client")?
                            }
                        };
                        _serde::__private::Ok(Settings {
                            database: __field0,
                            application: __field1,
                            email_client: __field2,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "database",
                    "application",
                    "email_client",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Settings",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Settings<P>>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    pub struct DatabaseSettings<P: SharedPointerHKT> {
        pub username: K1<P, str>,
        pub password: K1<P, str>,
        pub port: u16,
        pub host: K1<P, str>,
        pub database_name: K1<P, str>,
        pub require_ssl: bool,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de, P: SharedPointerHKT> _serde::Deserialize<'de> for DatabaseSettings<P>
        where
            P: _serde::Deserialize<'de>,
        {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "username" => _serde::__private::Ok(__Field::__field0),
                            "password" => _serde::__private::Ok(__Field::__field1),
                            "port" => _serde::__private::Ok(__Field::__field2),
                            "host" => _serde::__private::Ok(__Field::__field3),
                            "database_name" => _serde::__private::Ok(__Field::__field4),
                            "require_ssl" => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"username" => _serde::__private::Ok(__Field::__field0),
                            b"password" => _serde::__private::Ok(__Field::__field1),
                            b"port" => _serde::__private::Ok(__Field::__field2),
                            b"host" => _serde::__private::Ok(__Field::__field3),
                            b"database_name" => _serde::__private::Ok(__Field::__field4),
                            b"require_ssl" => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de, P: SharedPointerHKT>
                where
                    P: _serde::Deserialize<'de>,
                {
                    marker: _serde::__private::PhantomData<DatabaseSettings<P>>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de, P: SharedPointerHKT> _serde::de::Visitor<'de>
                for __Visitor<'de, P>
                where
                    P: _serde::Deserialize<'de>,
                {
                    type Value = DatabaseSettings<P>;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct DatabaseSettings",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            K1<P, str>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct DatabaseSettings with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            K1<P, str>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct DatabaseSettings with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            u16,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct DatabaseSettings with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            K1<P, str>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct DatabaseSettings with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            K1<P, str>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct DatabaseSettings with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct DatabaseSettings with 6 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(DatabaseSettings {
                            username: __field0,
                            password: __field1,
                            port: __field2,
                            host: __field3,
                            database_name: __field4,
                            require_ssl: __field5,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<K1<P, str>> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<K1<P, str>> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<u16> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<K1<P, str>> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<K1<P, str>> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<bool> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "username",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<K1<P, str>>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "password",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<K1<P, str>>(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("port"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<u16>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("host"),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<K1<P, str>>(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "database_name",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<K1<P, str>>(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "require_ssl",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("username")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("password")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("port")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("host")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("database_name")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("require_ssl")?
                            }
                        };
                        _serde::__private::Ok(DatabaseSettings {
                            username: __field0,
                            password: __field1,
                            port: __field2,
                            host: __field3,
                            database_name: __field4,
                            require_ssl: __field5,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "username",
                    "password",
                    "port",
                    "host",
                    "database_name",
                    "require_ssl",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "DatabaseSettings",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<DatabaseSettings<P>>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    pub struct ApplicationSettings<P: SharedPointerHKT> {
        pub port: u16,
        pub host: K1<P, str>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de, P: SharedPointerHKT> _serde::Deserialize<'de>
        for ApplicationSettings<P>
        where
            P: _serde::Deserialize<'de>,
        {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "port" => _serde::__private::Ok(__Field::__field0),
                            "host" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"port" => _serde::__private::Ok(__Field::__field0),
                            b"host" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de, P: SharedPointerHKT>
                where
                    P: _serde::Deserialize<'de>,
                {
                    marker: _serde::__private::PhantomData<ApplicationSettings<P>>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de, P: SharedPointerHKT> _serde::de::Visitor<'de>
                for __Visitor<'de, P>
                where
                    P: _serde::Deserialize<'de>,
                {
                    type Value = ApplicationSettings<P>;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct ApplicationSettings",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            u16,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct ApplicationSettings with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            K1<P, str>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct ApplicationSettings with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(ApplicationSettings {
                            port: __field0,
                            host: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<u16> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<K1<P, str>> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("port"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<u16>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("host"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<K1<P, str>>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("port")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("host")?
                            }
                        };
                        _serde::__private::Ok(ApplicationSettings {
                            port: __field0,
                            host: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["port", "host"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "ApplicationSettings",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<ApplicationSettings<P>>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    pub struct EmailClientSettings<P: SharedPointerHKT> {
        pub base_url: K1<P, str>,
        pub sender_email: K1<P, str>,
    }
    impl<P: SharedPointerHKT> EmailClientSettings<P> {
        pub fn sender(&self) -> Result<SubscriberEmail<P>, SubscriberEmailParseError> {
            SubscriberEmail::try_from(self.sender_email.clone())
        }
    }
    impl<'de, P: SharedPointerHKT> serde::Deserialize<'de> for EmailClientSettings<P> {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            struct EmailClientSettingsVisitor<P>(PhantomData<P>);
            impl<'de, P: SharedPointerHKT> serde::de::Visitor<'de>
            for EmailClientSettingsVisitor<P> {
                type Value = EmailClientSettings<P>;
                fn expecting(
                    &self,
                    formatter: &mut std::fmt::Formatter,
                ) -> std::fmt::Result {
                    formatter
                        .write_str(
                            ::const_format::pmr::__AssertStr {
                                x: {
                                    use ::const_format::__cf_osRcTFl4A;
                                    ({
                                        #[doc(hidden)]
                                        #[allow(unused_mut, non_snake_case)]
                                        const CONCATP_NHPMWYD3NJA: &[__cf_osRcTFl4A::pmr::PArgument] = {
                                            let mut len = 0usize;
                                            let __const_fmt_local_0 = "EmailClientSettings";
                                            &[
                                                __cf_osRcTFl4A::pmr::PConvWrapper("struct ")
                                                    .to_pargument_display(
                                                        __cf_osRcTFl4A::pmr::FormattingFlags::NEW,
                                                    ),
                                                __cf_osRcTFl4A::pmr::PConvWrapper(__const_fmt_local_0)
                                                    .to_pargument_display(
                                                        __cf_osRcTFl4A::pmr::FormattingFlags::__REG,
                                                    ),
                                            ]
                                        };
                                        {
                                            #[doc(hidden)]
                                            const ARR_LEN: usize = ::const_format::pmr::PArgument::calc_len(
                                                CONCATP_NHPMWYD3NJA,
                                            );
                                            #[doc(hidden)]
                                            const CONCAT_ARR: &::const_format::pmr::LenAndArray<
                                                [u8; ARR_LEN],
                                            > = &::const_format::pmr::__priv_concatenate(
                                                CONCATP_NHPMWYD3NJA,
                                            );
                                            #[doc(hidden)]
                                            #[allow(clippy::transmute_ptr_to_ptr)]
                                            const CONCAT_STR: &str = unsafe {
                                                let slice = ::const_format::pmr::transmute::<
                                                    &[u8; ARR_LEN],
                                                    &[u8; CONCAT_ARR.len],
                                                >(&CONCAT_ARR.array);
                                                {
                                                    let bytes: &'static [::const_format::pmr::u8] = slice;
                                                    let string: &'static ::const_format::pmr::str = {
                                                        ::const_format::__hidden_utils::PtrToRef {
                                                            ptr: bytes as *const [::const_format::pmr::u8] as *const str,
                                                        }
                                                            .reff
                                                    };
                                                    string
                                                }
                                            };
                                            CONCAT_STR
                                        }
                                    })
                                },
                            }
                                .x,
                        )
                }
                fn visit_seq<A>(self, seq: A) -> Result<Self::Value, A::Error>
                where
                    A: serde::de::SeqAccess<'de>,
                {
                    let _ = seq;
                    Err(
                        serde::de::Error::invalid_type(serde::de::Unexpected::Seq, &self),
                    )
                }
                fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>
                where
                    A: serde::de::MapAccess<'de>,
                {
                    let mut base_url: Result<_, A::Error> = Err(
                        de::Error::missing_field("base_url"),
                    );
                    let mut sender_email: Result<_, A::Error> = Err(
                        de::Error::missing_field("sender_email"),
                    );
                    while let Some(key) = map.next_key()? {
                        match key {
                            "base_url" => {
                                base_url = if base_url.is_ok() {
                                    Err(
                                        de::Error::duplicate_field({
                                            let _ = || {
                                                let _ = &base_url;
                                            };
                                            "base_url"
                                        }),
                                    )
                                } else {
                                    map.next_value()
                                };
                            }
                            "sender_email" => {
                                sender_email = if sender_email.is_ok() {
                                    Err(
                                        de::Error::duplicate_field({
                                            let _ = || {
                                                let _ = &sender_email;
                                            };
                                            "sender_email"
                                        }),
                                    )
                                } else {
                                    map.next_value()
                                };
                            }
                            _ => {
                                return Err(
                                    de::Error::unknown_variant(
                                        key,
                                        &["base_url", "sender_email"],
                                    ),
                                );
                            }
                        }
                    }
                    Validation::from(Ok(EmailClientSettings::new.curry()))
                        .apply(base_url.map_err(DeserializeError::from).into())
                        .apply(sender_email.map_err(DeserializeError::from).into())
                        .pipe(Result::from)
                        .map_err(DeserializeError::inner)
                }
            }
            deserializer.deserialize_seq(EmailClientSettingsVisitor::<P>(PhantomData))
        }
    }
    pub enum Environment {
        Local,
        Production,
    }
    impl Environment {
        pub fn as_str(&self) -> &'static str {
            match self {
                Environment::Local => "local",
                Environment::Production => "production",
            }
        }
    }
    impl TryFrom<String> for Environment {
        type Error = String;
        fn try_from(s: String) -> Result<Self, Self::Error> {
            match s.to_lowercase().as_str() {
                "local" => Ok(Self::Local),
                "production" => Ok(Self::Production),
                other => {
                    Err(
                        ::alloc::__export::must_use({
                            let res = ::alloc::fmt::format(
                                format_args!(
                                    "{0} is not a supported environment. Use either `local` or `production`.",
                                    other,
                                ),
                            );
                            res
                        }),
                    )
                }
            }
        }
    }
    pub fn get_configuration<P: SharedPointerHKT>() -> Result<
        Settings<P>,
        config::ConfigError,
    > {
        use std::env::current_dir;
        let configuration_directory = current_dir()
            .unwrap_or_else(|_| {
                {
                    ::core::panicking::panic_fmt(
                        format_args!(
                            "\'{0}()\' failed",
                            {
                                let _ = || {
                                    let _ = &current_dir;
                                };
                                "current_dir"
                            },
                        ),
                    );
                }
            })
            .join("configuration");
        config::Config::builder()
            .add_source(
                config::File::from(configuration_directory.join("base")).required(true),
            )
            .add_source(
                config::File::from(
                        configuration_directory
                            .join(
                                std::env::var(APP_ENVIRONMENT)
                                    .unwrap_or_else(|_| { "local".to_string() })
                                    .pipe(Environment::try_from)
                                    .expect("Parse env var failed.")
                                    .as_str(),
                            ),
                    )
                    .required(true),
            )
            .add_source(config::Environment::with_prefix("app").separator("__"))
            .build()
            .and_then(Config::try_deserialize::<Settings<P>>)
    }
    impl<P: SharedPointerHKT> DatabaseSettings<P> {
        pub fn without_db(&self) -> PgConnectOptions {
            PgConnectOptions::new()
                .host(&self.host)
                .username(&self.username)
                .password(&self.password)
                .port(self.port)
                .ssl_mode(
                    if self.require_ssl { PgSslMode::Require } else { PgSslMode::Prefer },
                )
        }
        pub fn with_db(&self) -> PgConnectOptions {
            self.without_db()
                .database(&self.database_name)
                .log_statements(log::LevelFilter::Trace)
        }
    }
}
